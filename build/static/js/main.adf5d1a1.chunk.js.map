{"version":3,"sources":["BooksAPI.js","components/Changer.js","components/Book.js","components/Search.js","components/BookShelf.js","components/Content.js","App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","getAll","fetch","concat","then","res","json","data","books","update","book","shelf","id","method","Object","objectSpread","Content-Type","body","JSON","stringify","search","query","Changer","updateShelf","event","_this","props","target","value","_this$props","this","allBook","bookShelf","map","eachBook","key","react_default","a","createElement","className","onChange","defaultValue","disabled","hidden","title","Component","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","bookImg","img","imageLinks","smallThumbnail","setState","componentDidMount","state","style","width","height","backgroundImage","Changer_Changer","authors","Search","searchBooks","BooksAPI","_this2","_this$state","errorMessage","bookResult","length","Book_book","onClick","handelShowSearchPage","type","placeholder","Bookshelf","Content","filter","index","BookShelf_Bookshelf","BooksApp","showSearchPage","getAllBooks","Search_Search","Content_Content","React","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.adf5d1a1.chunk.js","sourcesContent":["\r\nconst api = \"https://reactnd-books-api.udacity.com\"\r\n\r\n\r\n// Generate a unique token for storing your bookshelf data on the backend server.\r\nlet token = localStorage.token\r\nif (!token)\r\n  token = localStorage.token = Math.random().toString(36).substr(-8)\r\n\r\nconst headers = {\r\n  'Accept': 'application/json',\r\n  'Authorization': token\r\n}\r\n\r\nexport const get = (bookId) =>\r\n  fetch(`${api}/books/${bookId}`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.book)\r\n\r\nexport const getAll = () =>\r\n  fetch(`${api}/books`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.books)\r\n\r\nexport const update = (book, shelf) =>\r\n  fetch(`${api}/books/${book.id}`, {\r\n    method: 'PUT',\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ shelf })\r\n  }).then(res => res.json())\r\n\r\nexport const search = (query) =>\r\n  fetch(`${api}/search`, {\r\n    method: 'POST',\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ query })\r\n  }).then(res => res.json())\r\n    .then(data => data.books)\r\n","/* eslint-disable array-callback-return */\r\nimport React, { Component } from \"react\";\r\n\r\nexport default class Changer extends Component {\r\n  updateShelf = (event) => {\r\n    this.props.updateShelf(this.props.book, event.target.value);\r\n  };\r\n  render() {\r\n    const { book, allBook } = this.props;\r\n    let bookShelf = book.shelf;\r\n    const checkBook = allBook.map((eachBook, key) => {\r\n      if (eachBook.id === book.id) {\r\n        bookShelf = eachBook.shelf;\r\n      }\r\n    });\r\n    const shelves = [\r\n      { shelf: \"currentlyReading\", title: \"Currently Reading\" },\r\n      { shelf: \"read\", title: \"Read\" },\r\n      { shelf: \"wantToRead\", title: \"Want To Read\" },\r\n      { shelf: \"none\", title: \"none\" },\r\n    ];\r\n    return (\r\n      <div className=\"book-shelf-changer form-control\">\r\n        <select\r\n          onChange={this.updateShelf}\r\n          defaultValue={bookShelf}\r\n          value={bookShelf}\r\n        >\r\n          <option value=\"\" disabled>\r\n            Move to...\r\n          </option>\r\n          <option value=\"\" hidden>\r\n            ...\r\n          </option>\r\n          {shelves.map((shelf, key) => (\r\n            <option\r\n              value={shelf.shelf}\r\n              disabled={bookShelf === shelf.shelf ? true : null}\r\n            >\r\n              {shelf.title}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Changer from \"./Changer\";\r\n\r\nexport default class book extends Component {\r\n  constructor(props) {\r\n    super();\r\n    this.state = {\r\n      bookImg: \"https://cdn.onlinewebfonts.com/svg/img_347678.png\",\r\n    };\r\n  }\r\n  bookImg = () => {\r\n    const img = this.props.book.imageLinks\r\n    if (img && img.smallThumbnail) {\r\n      return (\r\n        this.setState({\r\n          bookImg: img.smallThumbnail\r\n        })\r\n      )\r\n    }\r\n  }\r\n  componentDidMount = () => {\r\n    this.bookImg()\r\n  }\r\n\r\n  render() {\r\n    const book = this.props.book;\r\n    return (\r\n      <div className=\"book\">\r\n        <div className=\"book-top\">\r\n          <div\r\n            className=\"book-cover\"\r\n            style={{\r\n              width: 128,\r\n              height: 192,\r\n              backgroundImage:\r\n                `url(${this.state.bookImg})`,\r\n            }}\r\n          />\r\n          <Changer \r\n            updateShelf={this.props.updateShelf} \r\n            book={book}\r\n            allBook = {this.props.allBook}\r\n            />\r\n        </div>\r\n        <div className=\"book-title\">{book.title}</div>\r\n        <div className=\"book-authors\">{book.authors}</div>\r\n        {/* {book.authors.map((author, key) => (\r\n            <div className=\"book-authors\">\r\n              {author}\r\n              </div>\r\n        ))} */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import { set } from \"mongoose\";\r\nimport React, { Component } from \"react\";\r\nimport * as BooksAPI from \"../BooksAPI\";\r\nimport Book from \"./Book\";\r\nexport default class Search extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      query: \"\",\r\n      books: [],\r\n    };\r\n  }\r\n\r\n  searchBooks = (event) => {\r\n    const query = event.target.value;\r\n    this.setState({ query });\r\n    if (query !== \"\") {\r\n      BooksAPI.search(query).then((books) => {\r\n        this.setState({ books });\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { query, books } = this.state;\r\n    const errorMessage = `Sorry There is no Result for  (${query}), Try Again!`;\r\n\r\n    var bookResult = [];\r\n    if (query === \"\") {\r\n      bookResult = [];\r\n    } else {\r\n      if (!books.length) {\r\n        bookResult = errorMessage;\r\n      } else {\r\n        bookResult = books.map((book, key) => (\r\n          <Book\r\n            key={key}\r\n            book={book}\r\n            updateShelf={this.props.updateShelf}\r\n            allBook={this.props.allBook}\r\n          />\r\n        ));\r\n      }\r\n    }\r\n    return (\r\n      <div className=\"search-books\">\r\n        <div className=\"search-books-bar\">\r\n          <button\r\n            className=\"close-search\"\r\n            onClick={() => this.props.handelShowSearchPage()}\r\n          >\r\n            Close\r\n          </button>\r\n          <div className=\"search-books-input-wrapper\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Search by title or author\"\r\n              value={query}\r\n              onChange={this.searchBooks}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"search-books-results\">\r\n          <ol className=\"books-grid\">{bookResult}</ol>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Book from \"./Book\";\r\nexport default class Bookshelf extends Component {\r\n  render() {\r\n    const shelf = this.props.shelf;\r\n    const books = this.props.books;\r\n    const book = books.map((book, key) => {\r\n      return (\r\n        <Book\r\n          key={key}\r\n          book={book}\r\n          updateShelf={this.props.updateShelf}\r\n          allBook = {this.props.allBook}\r\n        />\r\n      );\r\n    });\r\n\r\n    return (\r\n      <div className=\"bookshelf\">\r\n        <h2 className=\"bookshelf-title\">{shelf}</h2>\r\n        <div className=\"bookshelf-books\">\r\n          <ol className=\"books-grid\">\r\n            {book}\r\n            <li />\r\n          </ol>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport BookShelf from \"./BookShelf\";\r\nexport default class Content extends Component {\r\n  render() {\r\n    const currentlyReading = this.props.allBook.filter(\r\n      (book) => book.shelf === \"currentlyReading\"\r\n    );\r\n    const read = this.props.allBook.filter((book) => book.shelf === \"read\");\r\n    const wantToRead = this.props.allBook.filter(\r\n      (book) => book.shelf === \"wantToRead\"\r\n    );\r\n    const shelf = [\r\n      { book: currentlyReading, title: \"Currently Reading\" },\r\n      { book: read, title: \"Read\" },\r\n      { book: wantToRead, title: \"Want To Read\" },\r\n    ];\r\n    return (\r\n      <div className=\"list-books-content\">\r\n        <div>\r\n          {shelf.map((book, index) => (\r\n            <BookShelf \r\n            books={book.book} \r\n            shelf={book.title} \r\n            key={index}  \r\n            updateShelf={this.props.updateShelf}\r\n            allBook = {this.props.allBook}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport * as BooksAPI from \"./BooksAPI\";\r\nimport \"./App.css\";\r\nimport Search from \"./components/Search\";\r\nimport Content from \"./components/Content\";\r\nclass BooksApp extends React.Component {\r\n  state = {\r\n    showSearchPage: false,\r\n    allBook: [],\r\n  };\r\n\r\n  handelShowSearchPage = () => {\r\n    this.setState({\r\n      showSearchPage: !this.state.showSearchPage,\r\n    });\r\n  };\r\n\r\n  getAllBooks = () => {\r\n    BooksAPI.getAll().then((books) => {\r\n      this.setState({\r\n        allBook: books,\r\n      });\r\n    });\r\n  };\r\n  updateShelf = (book, shelf) => {\r\n    BooksAPI.update(book, shelf).then((books) => {\r\n      this.getAllBooks();\r\n    });\r\n  };\r\n\r\n  componentDidMount = () => {\r\n    this.getAllBooks();\r\n  };\r\n\r\n  render() {\r\n    const { showSearchPage, allBook } = this.state;\r\n    return (\r\n      <div className=\"app\">\r\n        {this.state.showSearchPage ? (\r\n          <Search\r\n            showSearchPage={showSearchPage}\r\n            handelShowSearchPage={this.handelShowSearchPage}\r\n            allBook={allBook}\r\n            updateShelf={this.updateShelf}\r\n          />\r\n        ) : (\r\n          <div className=\"list-books\">\r\n            <div className=\"list-books-title\">\r\n              <h1>MyReads</h1>\r\n            </div>\r\n            {/* <button\r\n              onClick={() =>\r\n                this.setState({\r\n                  allBook: [],\r\n                })\r\n              }\r\n            >\r\n              Delete All\r\n            </button> */}\r\n            <div>\r\n              <Content allBook={allBook} updateShelf={this.updateShelf} />\r\n            </div>\r\n            <div className=\"open-search\">\r\n              <button onClick={() => this.setState({ showSearchPage: true })}>\r\n                Add a book\r\n              </button>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BooksApp;\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport './index.css'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n"],"sourceRoot":""}